/**
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Redemption from '../Vouchery/Redemption';

/**
 * Redemptions service.
 * @module api/RedemptionsApi
 * @version 2.0.0
 */
export default class RedemptionsApi {

    /**
     * Constructs a new RedemptionsApi. 
     * @alias module:api/RedemptionsApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Confirm a redemption
     * @param {String} code Voucher code
     * @param {String} transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Redemption} and HTTP response
     */
    confirmRedemptionWithHttpInfo(code, transactionId) {
        let postBody = null;
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling confirmRedemption");
        }
        // verify the required parameter 'transactionId' is set
        if (transactionId === undefined || transactionId === null) {
            throw new Error("Missing the required parameter 'transactionId' when calling confirmRedemption");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {
            'transaction_id': transactionId
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Redemption;
        return this.apiClient.callApi(
            '/vouchers/{code}/redemptions', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Confirm a redemption
     * @param {String} code Voucher code
     * @param {String} transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Redemption}
     */
    confirmRedemption(code, transactionId) {
        return this.confirmRedemptionWithHttpInfo(code, transactionId)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Create a redemption
     * @param {String} code Voucher code
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Redemption} opts.redemption 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Redemption} and HTTP response
     */
    createRedemptionWithHttpInfo(code, opts) {
        opts = opts || {};
        let postBody = opts['redemption'];
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling createRedemption");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Redemption;
        return this.apiClient.callApi(
            '/vouchers/{code}/redemptions', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Create a redemption
     * @param {String} code Voucher code
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Redemption} opts.redemption 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Redemption}
     */
    createRedemption(code, opts) {
        return this.createRedemptionWithHttpInfo(code, opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Delete a redemption
     * @param {String} code Voucher code
     * @param {String} transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRedemptionWithHttpInfo(code, transactionId) {
        let postBody = null;
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling deleteRedemption");
        }
        // verify the required parameter 'transactionId' is set
        if (transactionId === undefined || transactionId === null) {
            throw new Error("Missing the required parameter 'transactionId' when calling deleteRedemption");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {
            'transaction_id': transactionId
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;
        return this.apiClient.callApi(
            '/vouchers/{code}/redemptions', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Delete a redemption
     * @param {String} code Voucher code
     * @param {String} transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRedemption(code, transactionId) {
        return this.deleteRedemptionWithHttpInfo(code, transactionId)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Get a redemption
     * @param {String} code Voucher code
     * @param {String} transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Redemption} and HTTP response
     */
    getRedemptionWithHttpInfo(code, transactionId) {
        let postBody = null;
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling getRedemption");
        }
        // verify the required parameter 'transactionId' is set
        if (transactionId === undefined || transactionId === null) {
            throw new Error("Missing the required parameter 'transactionId' when calling getRedemption");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {
            'transaction_id': transactionId
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Redemption;
        return this.apiClient.callApi(
            '/vouchers/{code}/redemptions', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Get a redemption
     * @param {String} code Voucher code
     * @param {String} transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Redemption}
     */
    getRedemption(code, transactionId) {
        return this.getRedemptionWithHttpInfo(code, transactionId)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Get all redemptions for a campaign
     * @param {Number} campaignId Campaign ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Vouchery/Redemption>} and HTTP response
     */
    getRedemptionsWithHttpInfo(campaignId) {
        let postBody = null;
        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getRedemptions");
        }

        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Redemption];
        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/redemptions', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Get all redemptions for a campaign
     * @param {Number} campaignId Campaign ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Vouchery/Redemption>}
     */
    getRedemptions(campaignId) {
        return this.getRedemptionsWithHttpInfo(campaignId)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}