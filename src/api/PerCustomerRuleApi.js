/**
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PerCustomerRule from '../model/PerCustomerRule';

/**
 * PerCustomerRule service.
 * @module api/PerCustomerRuleApi
 * @version 1.0
 */
export default class PerCustomerRuleApi {

    /**
     * Constructs a new PerCustomerRuleApi. 
     * @alias module:api/PerCustomerRuleApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPerCustomerRule operation.
     * @callback module:api/PerCustomerRuleApi~createPerCustomerRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerCustomerRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the per customer rule
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/PerCustomerRule} opts.perCustomerRule 
     * @param {module:api/PerCustomerRuleApi~createPerCustomerRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerCustomerRule}
     */
    createPerCustomerRule(campaignId, opts, callback) {
        opts = opts || {};
        let postBody = opts['perCustomerRule'];

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling createPerCustomerRule");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = PerCustomerRule;

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/per_customer_rule', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the deletePerCustomerRule operation.
     * @callback module:api/PerCustomerRuleApi~deletePerCustomerRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the per customer rule
     * @param {Number} campaignId Campaign ID
     * @param {module:api/PerCustomerRuleApi~deletePerCustomerRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePerCustomerRule(campaignId, callback) {
        let postBody = null;

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling deletePerCustomerRule");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/per_customer_rule', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the getPerCustomerRule operation.
     * @callback module:api/PerCustomerRuleApi~getPerCustomerRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerCustomerRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the per customer rule
     * @param {Number} campaignId Campaign ID
     * @param {module:api/PerCustomerRuleApi~getPerCustomerRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerCustomerRule}
     */
    getPerCustomerRule(campaignId, callback) {
        let postBody = null;

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getPerCustomerRule");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = PerCustomerRule;

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/per_customer_rule', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the updatePerCustomerRule operation.
     * @callback module:api/PerCustomerRuleApi~updatePerCustomerRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerCustomerRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the per customer rule
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/PerCustomerRule} opts.perCustomerRule 
     * @param {module:api/PerCustomerRuleApi~updatePerCustomerRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerCustomerRule}
     */
    updatePerCustomerRule(campaignId, opts, callback) {
        opts = opts || {};
        let postBody = opts['perCustomerRule'];

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling updatePerCustomerRule");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = PerCustomerRule;

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/per_customer_rule', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }


}