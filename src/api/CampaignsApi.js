/**
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Campaign from '../model/Campaign';

/**
 * Campaigns service.
 * @module api/CampaignsApi
 * @version 2.0.0
 */
export default class CampaignsApi {

    /**
     * Constructs a new CampaignsApi. 
     * @alias module:api/CampaignsApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCampaign operation.
     * @callback module:api/CampaignsApi~createCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a campaign
     * @param {Object} opts Optional parameters
     * @param {module:model/Campaign} opts.campaign 
     * @param {module:api/CampaignsApi~createCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    createCampaign(opts, callback) {
        opts = opts || {};
        let postBody = opts['campaign'];

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Campaign;
        return this.apiClient.callApi(
            '/campaigns', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the deleteCampaign operation.
     * @callback module:api/CampaignsApi~deleteCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a campaign
     * @param {Number} id Campaign ID
     * @param {module:api/CampaignsApi~deleteCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCampaign(id, callback) {
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling deleteCampaign");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;
        return this.apiClient.callApi(
            '/campaigns/{id}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the findSubCampaigns operation.
     * @callback module:api/CampaignsApi~findSubCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Campaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sub campaigns by params
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameCont Name contains
     * @param {String} opts.statusEq Status
     * @param {String} opts.templateEq Template (type) of sub campaign
     * @param {String} opts.triggersOnEq Triggers On
     * @param {String} opts.triggerNameCont Trigger Name contains
     * @param {module:api/CampaignsApi~findSubCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Campaign>}
     */
    findSubCampaigns(opts, callback) {
        opts = opts || {};
        let postBody = null;

        let pathParams = {};
        let queryParams = {
            'name_cont': opts['nameCont'],
            'status_eq': opts['statusEq'],
            'template_eq': opts['templateEq'],
            'triggers_on_eq': opts['triggersOnEq'],
            'trigger_name_cont': opts['triggerNameCont']
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Campaign];
        return this.apiClient.callApi(
            '/campaigns/sub', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the getCampaign operation.
     * @callback module:api/CampaignsApi~getCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a campaign
     * @param {Number} id Campaign ID
     * @param {module:api/CampaignsApi~getCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    getCampaign(id, callback) {
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling getCampaign");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Campaign;
        return this.apiClient.callApi(
            '/campaigns/{id}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the getCampaigns operation.
     * @callback module:api/CampaignsApi~getCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Campaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get main campaigns with children by params
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameCont Name contains
     * @param {String} opts.teamEq Team
     * @param {String} opts.statusEq Status
     * @param {String} opts.templateEq Template (promotion type) of main campaign
     * @param {module:api/CampaignsApi~getCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Campaign>}
     */
    getCampaigns(opts, callback) {
        opts = opts || {};
        let postBody = null;

        let pathParams = {};
        let queryParams = {
            'name_cont': opts['nameCont'],
            'team_eq': opts['teamEq'],
            'status_eq': opts['statusEq'],
            'template_eq': opts['templateEq']
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Campaign];
        return this.apiClient.callApi(
            '/campaigns', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the updateCampaign operation.
     * @callback module:api/CampaignsApi~updateCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a campaign
     * @param {Number} id Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Campaign} opts.campaign 
     * @param {module:api/CampaignsApi~updateCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    updateCampaign(id, opts, callback) {
        opts = opts || {};
        let postBody = opts['campaign'];
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling updateCampaign");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Campaign;
        return this.apiClient.callApi(
            '/campaigns/{id}', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }


}