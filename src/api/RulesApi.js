/**
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Rule from '../Vouchery/Rule';

/**
 * Rules service.
 * @module api/RulesApi
 * @version 2.0.0
 */
export default class RulesApi {

    /**
     * Constructs a new RulesApi. 
     * @alias module:api/RulesApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a rule
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Rule} opts.rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Rule} and HTTP response
     */
    createRuleWithHttpInfo(campaignId, opts) {
        opts = opts || {};
        let postBody = opts['rule'];
        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling createRule");
        }

        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Rule;
        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/rules', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Create a rule
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Rule} opts.rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Rule}
     */
    createRule(campaignId, opts) {
        return this.createRuleWithHttpInfo(campaignId, opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Delete a rule
     * @param {Number} id Rule ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRuleWithHttpInfo(id) {
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling deleteRule");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;
        return this.apiClient.callApi(
            '/rules/{id}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Delete a rule
     * @param {Number} id Rule ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRule(id) {
        return this.deleteRuleWithHttpInfo(id)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Get a rule
     * @param {Number} id Rule ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Rule} and HTTP response
     */
    getRuleWithHttpInfo(id) {
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling getRule");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Rule;
        return this.apiClient.callApi(
            '/rules/{id}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Get a rule
     * @param {Number} id Rule ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Rule}
     */
    getRule(id) {
        return this.getRuleWithHttpInfo(id)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Get all rules for a campaign
     * @param {Number} campaignId Campaign ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Vouchery/Rule>} and HTTP response
     */
    getRulesWithHttpInfo(campaignId) {
        let postBody = null;
        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getRules");
        }

        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Rule];
        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/rules', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Get all rules for a campaign
     * @param {Number} campaignId Campaign ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Vouchery/Rule>}
     */
    getRules(campaignId) {
        return this.getRulesWithHttpInfo(campaignId)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Update a rule
     * @param {Number} id Rule ID
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Rule} opts.rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Rule} and HTTP response
     */
    updateRuleWithHttpInfo(id, opts) {
        opts = opts || {};
        let postBody = opts['rule'];
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling updateRule");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Rule;
        return this.apiClient.callApi(
            '/rules/{id}', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Update a rule
     * @param {Number} id Rule ID
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Rule} opts.rule 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Rule}
     */
    updateRule(id, opts) {
        return this.updateRuleWithHttpInfo(id, opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}