/**
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BudgetRule from '../model/BudgetRule';

/**
 * BudgetRules service.
 * @module api/BudgetRulesApi
 * @version 1.0
 */
export default class BudgetRulesApi {

    /**
     * Constructs a new BudgetRulesApi. 
     * @alias module:api/BudgetRulesApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBudgetRule operation.
     * @callback module:api/BudgetRulesApi~createBudgetRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a budget rule
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/BudgetRule} opts.budgetRule 
     * @param {module:api/BudgetRulesApi~createBudgetRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetRule}
     */
    createBudgetRule(campaignId, opts, callback) {
        opts = opts || {};
        let postBody = opts['budgetRule'];

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling createBudgetRule");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = BudgetRule;

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/budget_rules', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the deleteBudgetRule operation.
     * @callback module:api/BudgetRulesApi~deleteBudgetRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule
     * @param {Number} id Rule ID
     * @param {module:api/BudgetRulesApi~deleteBudgetRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBudgetRule(id, callback) {
        let postBody = null;

        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling deleteBudgetRule");
        }


        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;

        return this.apiClient.callApi(
            '/budget_rules/{id}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the getBudgetRule operation.
     * @callback module:api/BudgetRulesApi~getBudgetRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a budget rule
     * @param {Number} id Rule ID
     * @param {module:api/BudgetRulesApi~getBudgetRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetRule}
     */
    getBudgetRule(id, callback) {
        let postBody = null;

        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling getBudgetRule");
        }


        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = BudgetRule;

        return this.apiClient.callApi(
            '/budget_rules/{id}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the getBudgetRules operation.
     * @callback module:api/BudgetRulesApi~getBudgetRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BudgetRule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all budget rules for a campaign
     * @param {Number} campaignId Campaign ID
     * @param {module:api/BudgetRulesApi~getBudgetRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BudgetRule>}
     */
    getBudgetRules(campaignId, callback) {
        let postBody = null;

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getBudgetRules");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [BudgetRule];

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/budget_rules', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the updateBudgetRule operation.
     * @callback module:api/BudgetRulesApi~updateBudgetRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a budget rule
     * @param {Number} id Rule ID
     * @param {Object} opts Optional parameters
     * @param {module:model/BudgetRule} opts.budgetRule 
     * @param {module:api/BudgetRulesApi~updateBudgetRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetRule}
     */
    updateBudgetRule(id, opts, callback) {
        opts = opts || {};
        let postBody = opts['budgetRule'];

        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling updateBudgetRule");
        }


        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = BudgetRule;

        return this.apiClient.callApi(
            '/budget_rules/{id}', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }


}