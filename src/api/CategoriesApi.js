/**
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Category from '../Vouchery/Category';

/**
 * Categories service.
 * @module api/CategoriesApi
 * @version 2.0.0
 */
export default class CategoriesApi {

    /**
     * Constructs a new CategoriesApi. 
     * @alias module:api/CategoriesApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a category
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Category} opts.category 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Category} and HTTP response
     */
    createCategoryWithHttpInfo(opts) {
        opts = opts || {};
        let postBody = opts['category'];

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Bearer'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Category;
        return this.apiClient.callApi(
            '/categories', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Create a category
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Category} opts.category 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Category}
     */
    createCategory(opts) {
        return this.createCategoryWithHttpInfo(opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Delete a category
     * @param {Number} id Category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCategoryWithHttpInfo(id) {
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling deleteCategory");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Bearer'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;
        return this.apiClient.callApi(
            '/categories/{id}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Delete a category
     * @param {Number} id Category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCategory(id) {
        return this.deleteCategoryWithHttpInfo(id)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Get all categories for a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Vouchery/Category>} and HTTP response
     */
    getCategoriesWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Bearer'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Category];
        return this.apiClient.callApi(
            '/categories', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Get all categories for a campaign
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Vouchery/Category>}
     */
    getCategories() {
        return this.getCategoriesWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Get a category
     * @param {Number} id Category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Category} and HTTP response
     */
    getCategoryWithHttpInfo(id) {
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling getCategory");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Bearer'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Category;
        return this.apiClient.callApi(
            '/categories/{id}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Get a category
     * @param {Number} id Category ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Category}
     */
    getCategory(id) {
        return this.getCategoryWithHttpInfo(id)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * Update a category
     * @param {Number} id Category ID
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Category} opts.category 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vouchery/Category} and HTTP response
     */
    updateCategoryWithHttpInfo(id, opts) {
        opts = opts || {};
        let postBody = opts['category'];
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling updateCategory");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Bearer'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Category;
        return this.apiClient.callApi(
            '/categories/{id}', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * Update a category
     * @param {Number} id Category ID
     * @param {Object} opts Optional parameters
     * @param {module:Vouchery/Category} opts.category 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vouchery/Category}
     */
    updateCategory(id, opts) {
        return this.updateCategoryWithHttpInfo(id, opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}