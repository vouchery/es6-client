/**
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Batch from '../model/Batch';
import InlineObject4 from '../model/InlineObject4';
import InlineResponse200 from '../model/InlineResponse200';
import Voucher from '../model/Voucher';

/**
 * Vouchers service.
 * @module api/VouchersApi
 * @version 2.0
 */
export default class VouchersApi {

    /**
     * Constructs a new VouchersApi. 
     * @alias module:api/VouchersApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGenerateVouchers operation.
     * @callback module:api/VouchersApi~batchGenerateVouchersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Voucher>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch create vouchers
     *  <p>Generate a batch of unique vouchers. Each voucher will be created using <code>{prefix}-{random code}</code> format where code will be a random string of requested type and length. <strong>A prefix needs to be unique within a project.</strong></p> <p> Following code types are supported: <ul> <li>digits</li> <li>letters</li> <li>mixed (digits and letters)</li> </ul> </p> <p>Allowed characters for each code type have been filtered to avoid typing mistakes. Maximum number of codes possible to generate in one batch request is 50 000.</p>
     * @param {Number} id Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Batch} opts.batch 
     * @param {module:api/VouchersApi~batchGenerateVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Voucher>}
     */
    batchGenerateVouchers(id, opts, callback) {
        opts = opts || {};
        let postBody = opts['batch'];
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling batchGenerateVouchers");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = [Voucher];
        return this.apiClient.callApi(
            '/campaigns/{id}/vouchers/batch', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the createVoucher operation.
     * @callback module:api/VouchersApi~createVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Voucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a voucher
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Voucher} opts.voucher 
     * @param {module:api/VouchersApi~createVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Voucher}
     */
    createVoucher(campaignId, opts, callback) {
        opts = opts || {};
        let postBody = opts['voucher'];
        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling createVoucher");
        }

        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Voucher;
        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/vouchers', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the deleteVoucher operation.
     * @callback module:api/VouchersApi~deleteVoucherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a voucher
     * Delete a single voucher. Vouchers with at least one confirmed redemption can not be deleted.
     * @param {String} code Voucher code
     * @param {module:api/VouchersApi~deleteVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVoucher(code, callback) {
        let postBody = null;
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling deleteVoucher");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;
        return this.apiClient.callApi(
            '/vouchers/{code}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the expireVouchers operation.
     * @callback module:api/VouchersApi~expireVouchersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire a list of vouchers
     * Given a list of voucher codes, change their status to expired, unless they have been redeemed.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject4} opts.inlineObject4 
     * @param {module:api/VouchersApi~expireVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expireVouchers(opts, callback) {
        opts = opts || {};
        let postBody = opts['inlineObject4'];

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = [];
        let returnType = null;
        return this.apiClient.callApi(
            '/campaigns/vouchers/expire', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the findVoucher operation.
     * @callback module:api/VouchersApi~findVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Voucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a voucher by campaign metadata
     * <p>Find voucher by campaign metadata.</p> <p>   Optionally assign found voucher to a customer by passing customer_identifier param.   All vouchers for a customer can be fetched at <a href=\"#get_customers-identifier-vouchers\">/customers/{id}/vouchers</a>. </p> <p>If no voucher is available this endpoint will return an empty response and HTTP code <code>204 No content</code></p> <p>At least one metadata must be provided, otherwise no voucher will be returned.</p> 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.medium 
     * @param {Array.<String>} opts.purpose 
     * @param {Array.<String>} opts.team 
     * @param {Array.<String>} opts.channel 
     * @param {String} opts.customerIdentifier \"Assign found voucher to a customer with this identifier. Will create customer if not present. Optional.\"
     * @param {module:api/VouchersApi~findVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Voucher}
     */
    findVoucher(opts, callback) {
        opts = opts || {};
        let postBody = null;

        let pathParams = {};
        let queryParams = {
            'medium': this.apiClient.buildCollectionParam(opts['medium'], 'multi'),
            'purpose': this.apiClient.buildCollectionParam(opts['purpose'], 'multi'),
            'team': this.apiClient.buildCollectionParam(opts['team'], 'multi'),
            'channel': this.apiClient.buildCollectionParam(opts['channel'], 'multi'),
            'customer_identifier': opts['customerIdentifier']
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Voucher;
        return this.apiClient.callApi(
            '/vouchers/find', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the getVoucher operation.
     * @callback module:api/VouchersApi~getVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Voucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a voucher
     * @param {String} code Voucher code
     * @param {module:api/VouchersApi~getVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Voucher}
     */
    getVoucher(code, callback) {
        let postBody = null;
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling getVoucher");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Voucher;
        return this.apiClient.callApi(
            '/vouchers/{code}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the getVouchers operation.
     * @callback module:api/VouchersApi~getVouchersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Voucher>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all vouchers for a campaign
     * @param {Number} campaignId Campaign ID
     * @param {module:api/VouchersApi~getVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Voucher>}
     */
    getVouchers(campaignId, callback) {
        let postBody = null;
        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getVouchers");
        }

        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Voucher];
        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/vouchers', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the importVouchers operation.
     * @callback module:api/VouchersApi~importVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import your own vouchers
     * @param {Number} id Campaign ID
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/VouchersApi~importVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    importVouchers(id, opts, callback) {
        opts = opts || {};
        let postBody = null;
        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling importVouchers");
        }

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {
            'file': opts['file']
        };

        let authNames = ['Basic'];
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        let returnType = InlineResponse200;
        return this.apiClient.callApi(
            '/campaigns/{id}/vouchers/import', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }

    /**
     * Callback function to receive the result of the updateVoucher operation.
     * @callback module:api/VouchersApi~updateVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Voucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a voucher
     * Only voucher status can be updated.
     * @param {String} code Voucher code
     * @param {Object} opts Optional parameters
     * @param {module:model/Voucher} opts.voucher 
     * @param {module:api/VouchersApi~updateVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Voucher}
     */
    updateVoucher(code, opts, callback) {
        opts = opts || {};
        let postBody = opts['voucher'];
        // verify the required parameter 'code' is set
        if (code === undefined || code === null) {
            throw new Error("Missing the required parameter 'code' when calling updateVoucher");
        }

        let pathParams = {
            'code': code
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Voucher;
        return this.apiClient.callApi(
            '/vouchers/{code}', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null, callback
        );
    }


}