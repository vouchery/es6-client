/**
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryRule from '../model/CategoryRule';

/**
 * CategoryRules service.
 * @module api/CategoryRulesApi
 * @version 1.0
 */
export default class CategoryRulesApi {

    /**
     * Constructs a new CategoryRulesApi. 
     * @alias module:api/CategoryRulesApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCategoryRule operation.
     * @callback module:api/CategoryRulesApi~createCategoryRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a category rule
     * @param {Number} campaignId Campaign ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryRule} opts.categoryRule 
     * @param {module:api/CategoryRulesApi~createCategoryRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryRule}
     */
    createCategoryRule(campaignId, opts, callback) {
        opts = opts || {};
        let postBody = opts['categoryRule'];

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling createCategoryRule");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = CategoryRule;

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/category_rules', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the deleteCategoryRule operation.
     * @callback module:api/CategoryRulesApi~deleteCategoryRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a category rule
     * @param {Number} id Rule ID
     * @param {module:api/CategoryRulesApi~deleteCategoryRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCategoryRule(id, callback) {
        let postBody = null;

        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling deleteCategoryRule");
        }


        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = [];
        let returnType = null;

        return this.apiClient.callApi(
            '/category_rules/{id}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the getCategoryRule operation.
     * @callback module:api/CategoryRulesApi~getCategoryRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a category rule
     * @param {Number} id Rule ID
     * @param {module:api/CategoryRulesApi~getCategoryRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryRule}
     */
    getCategoryRule(id, callback) {
        let postBody = null;

        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling getCategoryRule");
        }


        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = CategoryRule;

        return this.apiClient.callApi(
            '/category_rules/{id}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the getCategoryRules operation.
     * @callback module:api/CategoryRulesApi~getCategoryRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryRule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all category rules for a campaign
     * @param {Number} campaignId Campaign ID
     * @param {module:api/CategoryRulesApi~getCategoryRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryRule>}
     */
    getCategoryRules(campaignId, callback) {
        let postBody = null;

        // verify the required parameter 'campaignId' is set
        if (campaignId === undefined || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getCategoryRules");
        }


        let pathParams = {
            'campaign_id': campaignId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [CategoryRule];

        return this.apiClient.callApi(
            '/campaigns/{campaign_id}/category_rules', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the updateCategoryRule operation.
     * @callback module:api/CategoryRulesApi~updateCategoryRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a category rule
     * @param {Number} id Rule ID
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryRule} opts.categoryRule 
     * @param {module:api/CategoryRulesApi~updateCategoryRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryRule}
     */
    updateCategoryRule(id, opts, callback) {
        opts = opts || {};
        let postBody = opts['categoryRule'];

        // verify the required parameter 'id' is set
        if (id === undefined || id === null) {
            throw new Error("Missing the required parameter 'id' when calling updateCategoryRule");
        }


        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['Basic'];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = CategoryRule;

        return this.apiClient.callApi(
            '/category_rules/{id}', 'PATCH',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }


}