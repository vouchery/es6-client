/**
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RuleProductItemExistsItemConditions from './RuleProductItemExistsItemConditions';

/**
 * The RuleProductItemExists model module.
 * @module model/RuleProductItemExists
 * @version 2.0.0
 */
class RuleProductItemExists {
    /**
     * Constructs a new <code>RuleProductItemExists</code>.
     * @alias module:model/RuleProductItemExists
     * @param type {module:model/RuleProductItemExists.TypeEnum} Check if trigger has specific product item related
     * @param itemConditions {Array.<module:model/RuleProductItemExistsItemConditions>} Array of item conditions, that item should fit
     */
    constructor(type, itemConditions) {

        RuleProductItemExists.initialize(this, type, itemConditions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, itemConditions) {
        obj['type'] = type;
        obj['item_conditions'] = itemConditions;
    }

    /**
     * Constructs a <code>RuleProductItemExists</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleProductItemExists} obj Optional instance to populate.
     * @return {module:model/RuleProductItemExists} The populated <code>RuleProductItemExists</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleProductItemExists();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('item_conditions')) {
                obj['item_conditions'] = ApiClient.convertToType(data['item_conditions'], [RuleProductItemExistsItemConditions]);
            }
        }
        return obj;
    }


}

/**
 * Check if trigger has specific product item related
 * @member {module:model/RuleProductItemExists.TypeEnum} type
 * @default 'product_item_exists'
 */
RuleProductItemExists.prototype['type'] = 'product_item_exists';

/**
 * Array of item conditions, that item should fit
 * @member {Array.<module:model/RuleProductItemExistsItemConditions>} item_conditions
 */
RuleProductItemExists.prototype['item_conditions'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RuleProductItemExists['TypeEnum'] = {

    /**
     * value: "product_item_exists"
     * @const
     */
    "product_item_exists": "product_item_exists"
};



export default RuleProductItemExists;